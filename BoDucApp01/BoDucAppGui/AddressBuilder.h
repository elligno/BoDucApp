#pragma once

// C++ include
#include <string>

namespace bdGui 
{
	// Responsibility:
	//  Build the whole address of the ShippedTo field
	//  Since the address is na aggregation of string
	// its essentially  string builder.
	//  Usage:
	//   coming soon!!!  
	class AddressBuilder 
	{
	public:
		// 
		// Structure that hold the address fields
		//
		struct AddressStruct
		{
			// when declare like that, 
			AddressStruct() = default;
			explicit AddressStruct( const std::string& aWholeAddress) : m_wholeAddress(aWholeAddress) {}

			// NOTE
			//  Do not need to do that, its more as documentation
			//  to show the intent of the programmer.
			// in the present case, the compiler will generate 
			// default ctor, i don't need to do that, but its
			// good for documentation (it shows clearly the 
			// intent of the programmer)
			// Forcing a constructors to be generated by the compiler.
			// copy ctor(lvalue/rvalue reference)
			AddressStruct(const AddressStruct& aOther) = default;
			AddressStruct(AddressStruct&& aOther) = default;
			// assignment ctor (lvalue/rvalue reference)
			AddressStruct& operator= (const AddressStruct& aother) = default;
			AddressStruct& operator= (AddressStruct&& aOther) = default;

			// convert an address to a string
			std::string toString();
			//
			// members
			//
			std::string m_streetName; // ...
			std::string m_city;       // character
			std::string m_postalCode; // made of char and digit
			std::string m_wholeAddress;
		};

	public:
		// some ctor needed
		explicit AddressBuilder( const std::string& aVecOfstring=" ");
		explicit AddressBuilder( const AddressStruct& aAddrs) {}
		explicit AddressBuilder( std::initializer_list<std::string>& aListOfAddressPart);

		// services provided by this class
		
		//Appends information to the end of the current AddressBuilder.
		void Append( const std::string& aStr2Append);
	  //Replaces a format specifier passed in a string with formatted text.
		void AppendFormat();
		//Inserts a string or object into the specified index of the current AddressBuilder.
		void Insert( const std::string& aStr2Insert);
	  //Removes a specified number of characters from the current StringBuilder.
		bool Remove();
		//Replaces a specified character (field) at a specified index.
		void Replace();
		// overload some operator  such as += (not sure yet!!)
		AddressStruct getAddress() const { return m_addressStruct; }
		void printAddress(); // ????
	protected:
	private:
		AddressStruct m_addressStruct;
	};
} // End of namespace
